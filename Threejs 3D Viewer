var scene, camera, renderer, keyboard, tablet, mouseOnTablet;

var origin = new THREE.Vector3(0, 0, 0);
var mouse = new THREE.Vector2();
var raycaster;

//these variables exist for use in a control scheme that was not used for this demo
var targetRotationX = 0;
var targetRotationOnMouseDownX = 0;
var targetRotationY = 0;
var targetRotationOnMouseDownY = 0;
var mouseX = 0;
var mouseXOnMouseDown = 0;
var mouseY = 0;
var mouseYOnMouseDown = 0;

init();
animate();

function init() {

	// Create the scene and set the scene size.
	scene = new THREE.Scene();
	var WIDTH = 1000, HEIGHT = 600;

	keyboard = new THREEx.KeyboardState();

	// Create a renderer and add it to the DOM.
	renderer = new THREE.WebGLRenderer( {
		antialias : true
	});
	renderer.setSize(WIDTH, HEIGHT);
	document.body.appendChild(renderer.domElement);

	// Create a camera, zoom it out from the model, and add it to the scene.
	camera = new THREE.PerspectiveCamera(60, WIDTH / HEIGHT, 0.1, 20000);
	camera.position.set(6, 6, 6);
	camera.lookAt(new THREE.Vector3(0, 0, 0));
	scene.add(camera);

//	EVENT LISTENER TO DYNAMICALLY CHANGE THE SIZE OF THE
//	VIEWER IF THE WINDOW IS READJUSTED - REMOVED FOR THE TIME BEING
	
//	window.addEventListener('resize', function() {
//		var WIDTH = 1000, HEIGHT = 600;
//		renderer.setSize(WIDTH, HEIGHT);
//		camera.aspect = WIDTH / HEIGHT;
//		camera.updateProjectionMatrix();
//	});

	
//  LOADING THE OBJECT IN FROM THE /js/ FOLDER

	var loader = new THREE.JSONLoader();
	loader.load("js/tablet_20_tiny_withScalar_workingTex.json", function(object,
			materials) {
		//scene.add(object);
		//var faceMaterial = new THREE. MeshFaceMaterial( materials );
		
		//tablet = new THREE.Mesh(geometry, materials[0]);
		tablet = new THREE.Mesh(object, new THREE.MeshFaceMaterial(materials));
		//tablet = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial(materials));
		//scene.add(tablet);
		//tablet.position.x = -10;
	});
	
// the following ensures that the tablet is added only when it is completely loaded
	loader.onLoadComplete = function() {
		scene.add(tablet)
	};
	
	//builds the colored axis
	var axes = buildAxes();
	scene.add(axes);

	// Set the background color of the scene.
	renderer.setClearColor(0x333F47, 1);

	// Create a light, set its position, and add it to the scene.
	var light = new THREE.SpotLight(0xffffff, 1);
	light.position.set(-10, 20, 10);
	scene.add(light);

	var light2 = new THREE.SpotLight(0xffffff, 1);
	light2.position.set(100, -200, -100);
	scene.add(light2);


	//Orbit controls
	//consider fixed controls with movable object and fixed camera

	controls = new THREE.TrackballControls(camera, renderer.domElement);
	//it is possible to disable pan and zoom functions
	controls.noPan = false;
	controls.noZoom = false;

	//raycaster object to be used for future control scheme
	raycaster = new THREE.Raycaster();
}

//the following code was partially taken from:
//http://mrdoob.github.io/three.js/examples/canvas_geometry_cube.html
//in order to better understand the javascript event system

function onDocumentMouseDown(event) {
	event.preventDefault();

	document.addEventListener('mousemove', onDocumentMouseMove, false);
	document.addEventListener('mouseup', onDocumentMouseUp, false);
	document.addEventListener('mouseout', onDocumentMouseOut, false);

	mouseXOnMouseDown = event.clientX - 500;
	mouseYOnMouseDown = event.clientY - 300;
	targetRotationOnMouseDownX = targetRotationX;
	targetRotationOnMouseDownY = targetRotationY;
}

function onDocumentMouseMove(event) {
	mouseX = event.clientX - 500;
	mouseY = event.clientY - 300;

	targetRotationX = targetRotationOnMouseDownX + (mouseX - mouseXOnMouseDown)
			* 0.02;
	targetRotationY = targetRotationOnMouseDownY + (mouseY - mouseYOnMouseDown)
			* 0.02;
}
function onDocumentMouseUp(event) {
	document.removeEventListener('mousemove', onDocumentMouseMove, false);
	document.removeEventListener('mouseup', onDocumentMouseUp, false);
	document.removeEventListener('mouseout', onDocumentMouseOut, false);
}
function onDocumentMouseOut(event) {
	document.removeEventListener('mousemove', onDocumentMouseMove, false);
	document.removeEventListener('mouseup', onDocumentMouseUp, false);
	document.removeEventListener('mouseout', onDocumentMouseOut, false);
}
function onDocumentTouchStart(event) {
	if (event.touches.length === 1) {
		event.preventDefault();

		mouseXOnMouseDown = event.touches[0].pageX - 500;
		mouseYOnMouseDown = event.touches[0].pageY - 300;
		targetRotationOnMouseDownX = targetRotationX;
		targetRotationOnMouseDownY = targetRotationY;
	}
}
function onDocumentTouchMove(event) {
	if (event.touches.length === 1) {
		event.preventDefault();

		mouseX = event.touches[0].pageX - 500;
		mouseY - event.touches[0].pageY - 300;
		targetRotationX = targetRotationOnMouseDownX
				+ (mouseX - mouseXOnMouseDown) * 0.05;
		targetRotationY = targetRotationOnMouseDownY
				+ (mouseY - mouseYOnMouseDown) * 0.05;
	}
}
//END - doob github code

function animate() {

	requestAnimationFrame(animate);
	raycaster.set(camera.position, origin);

	//render logic:
	
	//current event system results in these adjustments to the object:
	//tablet.rotation.y = targetRotationX;
	//tablet.rotation.x = targetRotationY;
	//however they are commented out as they have not been fully implemented

	renderer.render(scene, camera);
	controls.update();
}

//the following code was take from:
//https://github.com/sole/three.js-tutorials/blob/master/object_picking/main.js
//for a simple three dimensional plane indicators
function buildAxes() {
	var axes = new THREE.Object3D();
	axes.add(buildAxis(new THREE.Vector3(0, 0, 0),
			new THREE.Vector3(100, 0, 0), 0xFF0000, false)); // +X
	axes.add(buildAxis(new THREE.Vector3(0, 0, 0),
			new THREE.Vector3(-100, 0, 0), 0x800000, true)); // -X
	axes.add(buildAxis(new THREE.Vector3(0, 0, 0),
			new THREE.Vector3(0, 100, 0), 0x00FF00, false)); // +Y
	axes.add(buildAxis(new THREE.Vector3(0, 0, 0),
			new THREE.Vector3(0, -100, 0), 0x008000, true)); // -Y
	axes.add(buildAxis(new THREE.Vector3(0, 0, 0),
			new THREE.Vector3(0, 0, 100), 0x0000FF, false)); // +Z
	axes.add(buildAxis(new THREE.Vector3(0, 0, 0),
			new THREE.Vector3(0, 0, -100), 0x000080, true)); // -Z
	return axes;
}

function buildAxis(src, dst, colorHex, dashed) {
	var geom = new THREE.Geometry(), mat;
	if (dashed) {
		mat = new THREE.LineDashedMaterial( {
			linewidth : 1,
			color : colorHex,
			dashSize : 50,
			gapSize : 50
		});
	} else {
		mat = new THREE.LineBasicMaterial( {
			linewidth : 1,
			color : colorHex
		});
	}
	geom.vertices.push(src.clone());
	geom.vertices.push(dst.clone());
	var axis = new THREE.Line(geom, mat);
	return axis;
}
